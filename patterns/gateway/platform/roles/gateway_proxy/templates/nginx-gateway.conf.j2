upstream backend_http {
{% for host in groups['internal'] %}
    # WireGuard backend (always included)
    server {{ hostvars[host]['wireguard_ip'] }}:{{ hostvars[host]['vm_port'] }};

    {% if network_mode in ['mycelium-only', 'both'] %}
    # Mycelium backend
    server [{{ hostvars[host]['mycelium_ip'] }}]:{{ hostvars[host]['vm_port'] }};
    {% endif %}
{% endfor %}
}

upstream backend_https {
{% for host in groups['internal'] %}
    # Use same ports for HTTPS as HTTP (VMs don't have separate SSL)
    server {{ hostvars[host]['wireguard_ip'] }}:{{ hostvars[host]['vm_port'] }};

    {% if network_mode in ['mycelium-only', 'both'] %}
    server [{{ hostvars[host]['mycelium_ip'] }}]:{{ hostvars[host]['vm_port'] }};
    {% endif %}
{% endfor %}
}

server {
    listen 80;
    server_name {{ lookup('env', 'DOMAIN_NAME') | default('_') }};

    # Redirect HTTP to HTTPS when SSL is enabled and certificates exist
    {% if enable_ssl | default(false) and ssl_cert_exists | default(false) %}
    return 301 https://$server_name$request_uri;
    {% endif %}

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Proxy settings
    location / {
        proxy_pass http://backend_http;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

{% if lookup('env', 'ENABLE_SSL') | default('false') | bool and ssl_cert_exists | default(false) %}
# SSL server block (only included when certificates exist)
# This block is conditionally included based on certificate availability
server {
    listen 443 ssl http2;
    server_name {{ lookup('env', 'DOMAIN_NAME') | default('_') }};

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/{{ lookup('env', 'DOMAIN_NAME') }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ lookup('env', 'DOMAIN_NAME') }}/privkey.pem;

    # Enhanced SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;

    # SSL session caching
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/{{ lookup('env', 'DOMAIN_NAME') }}/chain.pem;

    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Gateway demo page (serve static files)
    root /var/www/gateway-demo;
    index index.html;

    # API endpoint
    location /api/status {
        default_type application/json;
        return 200 '{"gateway_type":"{{ gateway_type | default("gateway_proxy") }}","public_ipv4":"{{ ansible_default_ipv4.address | default("N/A") }}","network":"{{ tfgrid_network | default("test") }}","hostname":"{{ ansible_hostname | default("gateway") }}","wireguard_ip":"{{ wireguard_ip | default("10.1.3.2") }}","mycelium_ip":"{{ mycelium_ip | default("Not assigned") }}","uptime_seconds":{{ ansible_uptime_seconds | int | default(0) }},"load_average":"{{ ansible_loadavg["1m"] | default("N/A") }}","memory_total_mb":{{ ansible_memtotal_mb | int | default(0) }},"architecture":"{{ ansible_architecture | default("x86_64") }}","features":["SSL","NAT","Firewall","WireGuard","Mycelium"],"ssl_enabled":true,"domain":"{{ lookup('env', 'DOMAIN_NAME') | default("N/A") }}","status":"active"}';
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # VM proxy endpoints (dynamically generated)
    {% for host in groups['internal'] %}
    location /vm{{ host }}/ {
        # SSL termination - proxy to HTTP backend
        proxy_pass http://{{ hostvars[host]['wireguard_ip'] }}:{{ hostvars[host]['vm_port'] }}/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    {% endfor %}

    # Main gateway page (catch-all for root)
    location / {
        try_files $uri $uri/ =404;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
    }
}
{% endif %}

# Default server block (only when no domain is configured for SSL)
{% if not (lookup('env', 'DOMAIN_NAME') and lookup('env', 'ENABLE_SSL') | default('false') | bool) %}
server {
    listen 80 default_server;
    server_name _;
    return 444;
}
{% endif %}

# Additional default server for IPv6 (only when no domain is configured for SSL)
{% if not (lookup('env', 'DOMAIN_NAME') and lookup('env', 'ENABLE_SSL') | default('false') | bool) %}
server {
    listen [::]:80 default_server;
    server_name _;
    return 444;
}
{% endif %}