#!/usr/bin/env bash
# TFGrid Compose - Main CLI entry point

set -e

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEPLOYER_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Source core modules
source "$DEPLOYER_ROOT/core/common.sh"
source "$DEPLOYER_ROOT/core/validation.sh"
source "$DEPLOYER_ROOT/core/pattern-loader.sh"
source "$DEPLOYER_ROOT/core/app-loader.sh"
source "$DEPLOYER_ROOT/core/orchestrator.sh"
source "$DEPLOYER_ROOT/core/registry.sh"
source "$DEPLOYER_ROOT/core/app-cache.sh"
source "$DEPLOYER_ROOT/core/deployment-state.sh"
source "$DEPLOYER_ROOT/core/login.sh"
source "$DEPLOYER_ROOT/core/config.sh"

# Version
VERSION="0.10.9"

# Context file support
CONTEXT_FILE=".tfgrid-compose.yaml"

# Default manifest file
MANIFEST_FILE="tfgrid-compose.yaml"

# Load context from .tfgrid-compose.yaml
load_context() {
    if [ -f "$CONTEXT_FILE" ]; then
        grep "^app:" "$CONTEXT_FILE" | awk '{print $2}'
    fi
}

# Resolve app input to path (handles both registry names and local paths)
resolve_app_path() {
    local app_input="$1"
    local quiet="${2:-false}"
    
    if [ -z "$app_input" ]; then
        return 1
    fi
    
    # If it's a path (contains / or starts with .), return as-is
    if [[ "$app_input" == */* ]] || [[ "$app_input" == .* ]]; then
        echo "$app_input"
        return 0
    fi
    
    # It's a registry app name - resolve to cached path
    local app_name="$app_input"
    local cached_path="$APP_CACHE_DIR/$app_name"
    
    if [ -d "$cached_path" ]; then
        echo "$cached_path"
        return 0
    fi
    
    # Not cached - try to download
    if [ "$quiet" != "true" ]; then
        log_info "Looking up $app_name in registry..."
    fi
    
    local repo_url=$(get_app_repo "$app_name")
    if [ -z "$repo_url" ]; then
        if [ "$quiet" != "true" ]; then
            log_error "App '$app_name' not found in registry"
        fi
        return 1
    fi
    
    local app_path=$(get_app "$app_name" "$repo_url")
    if [ -z "$app_path" ]; then
        return 1
    fi
    
    echo "$app_path"
    return 0
}

# Parse global flags
while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--file)
            MANIFEST_FILE="$2"
            shift 2
            ;;
        *)
            break
            ;;
    esac
done

# Export manifest file for other modules
export APP_MANIFEST_FILE="$MANIFEST_FILE"

# Command dispatcher
COMMAND="${1:-help}"
shift || true

# Handle commands
case "$COMMAND" in
    --version|version|-v)
        echo "TFGrid Compose v$VERSION"
        exit 0
        ;;
    
    search)
        # Search registry
        log_info "TFGrid Compose v$VERSION - Search Registry"
        echo ""
        
        QUERY="${1:-}"
        TAG="${2:-}"
        
        if [ -n "$TAG" ] && [ "$1" = "--tag" ]; then
            TAG="$2"
            QUERY=""
        fi
        
        log_info "Available apps:"
        echo ""
        
        if ! search_registry "$QUERY" "$TAG"; then
            log_error "Failed to search registry"
            exit 1
        fi
        
        echo ""
        log_info "Deploy an app: tfgrid-compose up <app-name>"
        exit 0
        ;;
    
    list)
        # List deployed apps
        log_info "TFGrid Compose v$VERSION - Deployed Apps"
        echo ""
        
        if ! list_deployed_apps; then
            log_warning "No apps deployed"
            echo ""
            log_info "Deploy an app: tfgrid-compose up <app-name>"
        fi
        
        exit 0
        ;;
    
    switch)
        # Switch active app
        APP_NAME="$1"
        
        if [ -z "$APP_NAME" ]; then
            log_error "Usage: tfgrid-compose switch <app>"
            exit 1
        fi
        
        if set_current_app "$APP_NAME"; then
            log_success "Switched to $APP_NAME"
        else
            exit 1
        fi
        
        exit 0
        ;;
        
    up)
        # Deploy command
        log_info "TFGrid Compose v$VERSION"
        echo ""
        
        # Validate prerequisites
        if ! validate_prerequisites; then
            exit 1
        fi
        echo ""
        
        # Get app argument
        APP_INPUT="$1"
        if [ -z "$APP_INPUT" ]; then
            # Try loading from context
            APP_INPUT=$(get_current_app)
            if [ -z "$APP_INPUT" ]; then
                log_error "No app specified and no active app context"
                log_info "Usage: tfgrid-compose up <app-name>"
                log_info "Or:    tfgrid-compose up <app-path>"
                exit 1
            fi
            log_info "Using active app: $APP_INPUT"
        fi
        
        # Determine if input is app name or path
        APP_NAME=""
        APP_PATH=""
        
        if [[ "$APP_INPUT" == */* ]] || [[ "$APP_INPUT" == .* ]]; then
            # It's a path (contains / or starts with .)
            APP_PATH="$APP_INPUT"
            APP_NAME=$(basename "$APP_PATH")
            log_info "Deploying from path: $APP_PATH"
        else
            # It's an app name from registry
            APP_NAME="$APP_INPUT"
            log_info "Looking up $APP_NAME in registry..."
            
            # Get repo URL from registry
            REPO_URL=$(get_app_repo "$APP_NAME")
            if [ -z "$REPO_URL" ]; then
                log_error "App '$APP_NAME' not found in registry"
                log_info "Search apps: tfgrid-compose search"
                exit 1
            fi
            
            # Get or download app
            APP_PATH=$(get_app "$APP_NAME" "$REPO_URL")
            if [ -z "$APP_PATH" ]; then
                exit 1
            fi
            
            log_success "Using app: $APP_NAME"
        fi
        
        # Validate app path
        if ! validate_app_path "$APP_PATH"; then
            exit 1
        fi
        
        # Parse deployment flags FIRST (before checking deployment status)
        shift  # Remove app name
        PATTERN_NAME=""
        INTERACTIVE_MODE=false
        FORCE_DEPLOY=false
        CUSTOM_NODE=""
        CUSTOM_CPU=""
        CUSTOM_MEM=""
        CUSTOM_DISK=""
        CUSTOM_NETWORK=""
        
        while [[ $# -gt 0 ]]; do
            case $1 in
                --pattern)
                    PATTERN_NAME="$2"
                    shift 2
                    ;;
                --pattern=*)
                    PATTERN_NAME="${1#--pattern=}"
                    shift
                    ;;
                -i|--interactive)
                    INTERACTIVE_MODE=true
                    shift
                    ;;
                --force|-f)
                    FORCE_DEPLOY=true
                    shift
                    ;;
                --node)
                    CUSTOM_NODE="$2"
                    shift 2
                    ;;
                --cpu)
                    CUSTOM_CPU="$2"
                    shift 2
                    ;;
                --mem|--memory)
                    CUSTOM_MEM="$2"
                    shift 2
                    ;;
                --disk)
                    CUSTOM_DISK="$2"
                    shift 2
                    ;;
                --network)
                    CUSTOM_NETWORK="$2"
                    shift 2
                    ;;
                *)
                    log_warning "Unknown flag: $1"
                    shift
                    ;;
            esac
        done
        
        # Export for use in orchestrator
        export INTERACTIVE_MODE
        export CUSTOM_NODE
        export CUSTOM_CPU
        export CUSTOM_MEM
        export CUSTOM_DISK
        export CUSTOM_NETWORK
        
        # Check if app is already deployed or has stale state
        if is_app_deployed "$APP_NAME"; then
            # Check if deployment is healthy
            if is_deployment_healthy "$APP_NAME"; then
                if [ "$FORCE_DEPLOY" = "true" ]; then
                    log_warning "Force deploy requested, destroying existing deployment..."
                    export_app_state_dir "$APP_NAME"
                    # Load app for destroy operation
                    if ! load_app "$APP_PATH"; then
                        exit 1
                    fi
                    if ! destroy_deployment; then
                        log_error "Failed to destroy existing deployment"
                        exit 1
                    fi
                    echo ""
                else
                    log_error "App '$APP_NAME' is already deployed"
                    log_info "Destroy first: tfgrid-compose down $APP_NAME"
                    log_info "Or force redeploy: tfgrid-compose up $APP_NAME --force"
                    exit 1
                fi
            else
                # Deployment exists but unhealthy - clean stale state
                log_warning "Found unhealthy deployment state for $APP_NAME"
                
                # Check if force deploy is requested
                if [ "$FORCE_DEPLOY" = "true" ]; then
                    log_info "Force deploy requested, cleaning unhealthy state..."
                    clean_stale_state "$APP_NAME"
                    echo ""
                elif ! validate_terraform_state "$APP_NAME"; then
                    log_info "Detected stale Terraform state, cleaning..."
                    clean_stale_state "$APP_NAME"
                    echo ""
                else
                    log_error "Deployment exists but is unhealthy"
                    log_info "Use --force to clean and redeploy: tfgrid-compose up $APP_NAME --force"
                    exit 1
                fi
            fi
        fi
        
        # Initialize deployment state for this app
        init_deployment_state "$APP_NAME"
        export_app_state_dir "$APP_NAME"
        
        # Load app
        if ! load_app "$APP_PATH"; then
            exit 1
        fi
        
        # Determine pattern to use
        if [ -z "$PATTERN_NAME" ]; then
            PATTERN_NAME=$(get_recommended_pattern)
            if [ -z "$PATTERN_NAME" ]; then
                log_error "No pattern specified and no recommended pattern in manifest"
                log_info "Usage: tfgrid-compose up <app> --pattern=<pattern>"
                exit 1
            fi
            log_info "Using recommended pattern: $PATTERN_NAME"
        fi
        
        # Load pattern
        if ! load_pattern "$PATTERN_NAME"; then
            exit 1
        fi
        
        # Check compatibility
        if ! check_pattern_compatibility "$PATTERN_NAME"; then
            exit 1
        fi
        
        # Validate app structure
        if ! validate_app_structure; then
            exit 1
        fi
        
        # Validate pattern requirements
        if ! validate_pattern_requirements; then
            exit 1
        fi
        
        echo ""
        
        # Validate network prerequisites based on manifest config
        main_network=$(yaml_get "$APP_MANIFEST" "network.main")
        inter_node=$(yaml_get "$APP_MANIFEST" "network.inter_node")
        mode=$(yaml_get "$APP_MANIFEST" "network.mode")
        
        if ! validate_network_prerequisites "$main_network" "$inter_node" "$mode"; then
            log_error "Network validation failed"
            exit 1
        fi
        
        echo ""
        log_success "All validations passed! Starting deployment..."
        echo ""
        
        # Deploy the app
        if ! deploy_app; then
            log_error "Deployment failed"
            exit 1
        fi
        
        exit 0
        ;;
        
    down)
        # Down command
        log_info "TFGrid Compose v$VERSION"
        echo ""
        
        # Try to get app path from argument or context
        APP_PATH="$1"
        if [ -z "$APP_PATH" ]; then
            APP_PATH=$(load_context)
            if [ -z "$APP_PATH" ]; then
                log_error "No app specified and no context file found"
                log_info "Usage: tfgrid-compose down <app>"
                exit 1
            fi
            log_info "Using app from context: $APP_PATH"
        fi
        
        # Validate app path
        if ! validate_app_path "$APP_PATH"; then
            exit 1
        fi
        
        # Check deployment exists
        if ! validate_deployment_exists; then
            exit 1
        fi
        
        # Load mnemonic (needed for Terraform destroy)
        if ! load_mnemonic; then
            exit 1
        fi
        log_success "ThreeFold mnemonic configured"
        echo ""
        
        # Load app to get configuration (needed for Terraform variables)
        if ! load_app "$APP_PATH"; then
            exit 1
        fi
        
        # Get pattern from manifest
        PATTERN_NAME=$(get_recommended_pattern)
        if [ -z "$PATTERN_NAME" ]; then
            log_error "No pattern specified and no recommended pattern in manifest"
            exit 1
        fi
        
        # Load pattern (needed for generate_terraform_config)
        if ! load_pattern "$PATTERN_NAME"; then
            exit 1
        fi
        
        # Parse manifest and export Terraform variables (but don't copy infrastructure)
        # Just parse config to export TF_VAR_* environment variables
        log_info "Loading configuration from manifest..."
        
        # Parse nodes, resources, gateway, network config (no 'local' - not in function)
        gateway_nodes=$(yaml_get "$APP_MANIFEST" "nodes.gateway")
        backend_nodes=$(yaml_get "$APP_MANIFEST" "nodes.backend")
        vm_node=$(yaml_get "$APP_MANIFEST" "nodes.vm")
        
        if [ -n "$gateway_nodes" ]; then
            if [[ "$gateway_nodes" == "["* ]]; then
                export TF_VAR_gateway_node=$(echo "$gateway_nodes" | tr -d '[]' | awk '{print $1}' | tr -d ',')
            else
                export TF_VAR_gateway_node="$gateway_nodes"
            fi
        fi
        
        [ -n "$backend_nodes" ] && export TF_VAR_internal_nodes="$backend_nodes"
        [ -n "$vm_node" ] && export TF_VAR_vm_node="$vm_node"
        
        # Parse resources
        gateway_cpu=$(yaml_get "$APP_MANIFEST" "resources.gateway.cpu")
        gateway_mem=$(yaml_get "$APP_MANIFEST" "resources.gateway.memory")
        gateway_disk=$(yaml_get "$APP_MANIFEST" "resources.gateway.disk")
        backend_cpu=$(yaml_get "$APP_MANIFEST" "resources.backend.cpu")
        backend_mem=$(yaml_get "$APP_MANIFEST" "resources.backend.memory")
        backend_disk=$(yaml_get "$APP_MANIFEST" "resources.backend.disk")
        vm_cpu=$(yaml_get "$APP_MANIFEST" "resources.vm.cpu")
        vm_mem=$(yaml_get "$APP_MANIFEST" "resources.vm.memory")
        vm_disk=$(yaml_get "$APP_MANIFEST" "resources.vm.disk")
        
        [ -n "$gateway_cpu" ] && export TF_VAR_gateway_cpu="$gateway_cpu"
        [ -n "$gateway_mem" ] && export TF_VAR_gateway_mem="$gateway_mem"
        [ -n "$gateway_disk" ] && export TF_VAR_gateway_disk="$gateway_disk"
        [ -n "$backend_cpu" ] && export TF_VAR_internal_cpu="$backend_cpu"
        [ -n "$backend_mem" ] && export TF_VAR_internal_mem="$backend_mem"
        [ -n "$backend_disk" ] && export TF_VAR_internal_disk="$backend_disk"
        [ -n "$vm_cpu" ] && export TF_VAR_vm_cpu="$vm_cpu"
        [ -n "$vm_mem" ] && export TF_VAR_vm_mem="$vm_mem"
        [ -n "$vm_disk" ] && export TF_VAR_vm_disk="$vm_disk"
        
        # Parse network
        main_network=$(yaml_get "$APP_MANIFEST" "network.main")
        export MAIN_NETWORK="${main_network:-wireguard}"
        export TF_VAR_main_network="$MAIN_NETWORK"
        export TF_VAR_tfgrid_network="${TF_VAR_tfgrid_network:-main}"
        
        log_success "Configuration loaded from manifest"
        
        # Destroy the deployment
        if ! destroy_deployment; then
            log_error "Destroy failed"
            exit 1
        fi
        
        exit 0
        ;;
        
    clean)
        # Clean up state directory
        log_info "TFGrid Compose v$VERSION"
        echo ""
        
        if [ -d "$STATE_DIR" ]; then
            log_warning "This will remove the local state directory: $STATE_DIR"
            read -p "Are you sure? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                rm -rf "$STATE_DIR"
                log_success "State directory cleaned"
            else
                log_info "Cancelled"
            fi
        else
            log_info "No state directory found (already clean)"
        fi
        exit 0
        ;;
        
    logs)
        # Logs command
        # Try to get app from argument or context
        APP_INPUT="$1"
        if [ -z "$APP_INPUT" ]; then
            APP_INPUT=$(load_context)
            if [ -z "$APP_INPUT" ]; then
                log_error "No app specified and no context file found"
                log_info "Usage: tfgrid-compose logs <app>"
                exit 1
            fi
        fi
        
        # Resolve app path (registry name or local path)
        APP_PATH=$(resolve_app_path "$APP_INPUT")
        if [ -z "$APP_PATH" ]; then
            log_error "Failed to resolve app: $APP_INPUT"
            exit 1
        fi
        
        # Set app name for validation
        APP_NAME=$(basename "$APP_PATH")
        
        # Validate app path
        if ! validate_app_path "$APP_PATH"; then
            exit 1
        fi
        
        # Check deployment exists
        if ! validate_deployment_exists; then
            exit 1
        fi
        
        # Load app to get pattern
        if ! load_app "$APP_PATH"; then
            exit 1
        fi
        
        # Get pattern from state (for now, use recommended)
        PATTERN_NAME=$(get_recommended_pattern)
        
        if [ -z "$PATTERN_NAME" ]; then
            log_error "Cannot determine pattern for app"
            exit 1
        fi
        
        # Load pattern
        if ! load_pattern "$PATTERN_NAME"; then
            exit 1
        fi
        
        # Execute pattern logs script
        execute_pattern_script "logs"
        ;;
        
    status)
        # Status command
        # Try to get app from argument or context
        APP_INPUT="$1"
        if [ -z "$APP_INPUT" ]; then
            APP_INPUT=$(load_context)
            if [ -z "$APP_INPUT" ]; then
                log_error "No app specified and no context file found"
                log_info "Usage: tfgrid-compose status <app>"
                exit 1
            fi
        fi
        
        # Resolve app path (registry name or local path)
        APP_PATH=$(resolve_app_path "$APP_INPUT")
        if [ -z "$APP_PATH" ]; then
            log_error "Failed to resolve app: $APP_INPUT"
            exit 1
        fi
        
        # Set app name for validation
        APP_NAME=$(basename "$APP_PATH")
        
        # Validate app path
        if ! validate_app_path "$APP_PATH"; then
            exit 1
        fi
        
        # Check deployment exists
        if ! validate_deployment_exists; then
            exit 1
        fi
        
        # Load app
        if ! load_app "$APP_PATH"; then
            exit 1
        fi
        
        # Get pattern
        PATTERN_NAME=$(get_recommended_pattern)
        
        if [ -z "$PATTERN_NAME" ]; then
            log_error "Cannot determine pattern for app"
            exit 1
        fi
        
        # Load pattern
        if ! load_pattern "$PATTERN_NAME"; then
            exit 1
        fi
        
        # Execute pattern status script
        execute_pattern_script "status"
        ;;
        
    ssh|connect)
        # SSH command
        # Try to get app from argument or context
        APP_INPUT="$1"
        if [ -z "$APP_INPUT" ]; then
            APP_INPUT=$(load_context)
            if [ -z "$APP_INPUT" ]; then
                log_error "No app specified and no context file found"
                log_info "Usage: tfgrid-compose ssh <app>"
                exit 1
            fi
        fi
        
        # Resolve app path (registry name or local path)
        APP_PATH=$(resolve_app_path "$APP_INPUT")
        if [ -z "$APP_PATH" ]; then
            log_error "Failed to resolve app: $APP_INPUT"
            exit 1
        fi
        
        # Load app
        if ! load_app "$APP_PATH"; then
            exit 1
        fi
        
        # Get pattern
        PATTERN_NAME=$(get_recommended_pattern)
        
        if [ -z "$PATTERN_NAME" ]; then
            log_error "Cannot determine pattern for app"
            exit 1
        fi
        
        # Load pattern
        if ! load_pattern "$PATTERN_NAME"; then
            exit 1
        fi
        
        # Execute pattern connect script
        execute_pattern_script "connect"
        ;;
        
    address)
        # Address command
        if [ -z "$1" ]; then
            log_error "Usage: tfgrid-compose address <app>"
            exit 1
        fi
        
        APP_PATH="$1"
        
        # Load app
        if ! load_app "$APP_PATH"; then
            exit 1
        fi
        
        # Get pattern
        PATTERN_NAME=$(get_recommended_pattern)
        
        if [ -z "$PATTERN_NAME" ]; then
            log_error "Cannot determine pattern for app"
            exit 1
        fi
        
        # Load pattern
        if ! load_pattern "$PATTERN_NAME"; then
            exit 1
        fi
        
        # Execute pattern address script
        execute_pattern_script "address"
        ;;
        
    init)
        # Initialize app configuration
        if [ -z "$1" ]; then
            log_error "Usage: tfgrid-compose init <app>"
            exit 1
        fi
        
        APP_PATH="$1"
        
        log_info "TFGrid Compose v$VERSION - Initialize Configuration"
        echo ""
        
        # Load app
        if ! load_app "$APP_PATH"; then
            exit 1
        fi
        
        # Check if .env already exists
        if [ -f "$APP_DIR/.env" ]; then
            read -p "⚠️  .env already exists. Overwrite? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log_info "Aborted."
                exit 0
            fi
        fi
        
        echo "📡 ThreeFold Grid Configuration"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        read -p "Node ID for VM: " NODE_ID
        if [ -z "$NODE_ID" ]; then
            log_error "Node ID is required"
            exit 1
        fi
        
        read -p "TFGrid Network (main/test/dev) [main]: " NETWORK
        NETWORK=${NETWORK:-main}
        
        echo ""
        echo "🔧 VM Resources"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # Get recommended resources from app
        REC_CPU=$(get_app_resource "cpu" "recommended")
        REC_MEM=$(get_app_resource "memory" "recommended")
        REC_DISK=$(get_app_resource "disk" "recommended")
        
        read -p "CPU cores [${REC_CPU:-4}]: " CPU
        CPU=${CPU:-${REC_CPU:-4}}
        read -p "Memory (MB) [${REC_MEM:-8192}]: " MEM
        MEM=${MEM:-${REC_MEM:-8192}}
        read -p "Disk (GB) [${REC_DISK:-100}]: " DISK
        DISK=${DISK:-${REC_DISK:-100}}
        
        echo ""
        echo "🌐 Network Connectivity"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        read -p "Connectivity (wireguard/mycelium) [wireguard]: " CONN
        CONN=${CONN:-wireguard}
        
        # Git config from local
        GIT_NAME=$(git config --global user.name 2>/dev/null || echo "")
        GIT_EMAIL=$(git config --global user.email 2>/dev/null || echo "")
        
        echo ""
        echo "🔐 Git Configuration"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        if [ -n "$GIT_NAME" ]; then
            echo "✅ Found local git config:"
            echo "   Name:  $GIT_NAME"
            echo "   Email: $GIT_EMAIL"
            read -p "Use this config? (Y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                read -p "Enter git name: " GIT_NAME
                read -p "Enter git email: " GIT_EMAIL
            fi
        else
            read -p "Git name: " GIT_NAME
            read -p "Git email: " GIT_EMAIL
        fi
        
        read -p "GitHub username (optional) [$GIT_NAME]: " GITHUB_USER
        GITHUB_USER=${GITHUB_USER:-$GIT_NAME}
        
        # Create .env
        cat > "$APP_DIR/.env" <<EOF
# TFGrid Compose Configuration for $APP_NAME
# Generated on $(date)

# ThreeFold Grid
export TF_VAR_tfgrid_network="$NETWORK"
export TF_VAR_ai_agent_node=$NODE_ID
export TF_VAR_ai_agent_cpu=$CPU
export TF_VAR_ai_agent_mem=$MEM
export TF_VAR_ai_agent_disk=$DISK

# Network
export CONNECTIVITY_NETWORK="$CONN"

# Git
export GIT_USER_NAME="$GIT_NAME"
export GIT_USER_EMAIL="$GIT_EMAIL"
EOF
        
        if [ -n "$GITHUB_USER" ]; then
            echo "export GITHUB_USER=\"$GITHUB_USER\"" >> "$APP_DIR/.env"
        fi
        
        echo ""
        log_success "Configuration saved to $APP_DIR/.env"
        echo ""
        log_info "Next steps:"
        echo "  1. Set your secrets (NEVER commit these!):"
        echo "     Fish: set -x TF_VAR_mnemonic (cat ~/.config/threefold/mnemonic)"
        echo "     Bash: export TF_VAR_mnemonic=\$(cat ~/.config/threefold/mnemonic)"
        echo ""
        echo "  2. Deploy your app:"
        echo "     tfgrid-compose up $APP_NAME"
        ;;
        
    exec)
        # Execute command on deployed VM
        # Validate app path
        if ! validate_app_path "$1"; then
            exit 1
        fi
        
        # Check deployment exists
        if ! validate_deployment_exists; then
            exit 1
        fi
        
        APP_PATH="$1"
        shift
        
        # Get remaining arguments as the command to execute
        if [ $# -eq 0 ]; then
            log_error "No command specified"
            log_info "Usage: tfgrid-compose exec <app> <command> [args...]"
            log_info "Examples:"
            log_info "  tfgrid-compose exec ../tfgrid-ai-agent login"
            log_info "  tfgrid-compose exec ../tfgrid-ai-agent create my-project"
            log_info "  tfgrid-compose exec ../tfgrid-ai-agent run my-project"
            exit 1
        fi
        
        # Load app
        if ! load_app "$APP_PATH"; then
            exit 1
        fi
        
        # Get VM IP from state
        vm_ip=$(grep "^vm_ip:" "$STATE_DIR/state.yaml" 2>/dev/null | awk '{print $2}')
        
        if [ -z "$vm_ip" ]; then
            log_error "No VM IP found in state"
            exit 1
        fi
        
        # Get the command and arguments
        REMOTE_CMD="$@"
        
        log_info "Executing on VM ($vm_ip): $REMOTE_CMD"
        echo ""
        
        # Execute command on VM
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
            root@$vm_ip "$REMOTE_CMD"
        
        exit $?
        ;;
        
    patterns)
        # List available patterns
        log_info "TFGrid Compose v$VERSION"
        echo ""
        list_patterns
        ;;
        
    agent)
        # AI Agent shorthand commands
        ACTION="${1:-list}"
        shift || true
        
        # Load context
        APP_FROM_CONTEXT=$(load_context)
        if [ -z "$APP_FROM_CONTEXT" ]; then
            log_error "No context file found"
            log_info "Create .tfgrid-compose.yaml with:"
            echo "  app: ../tfgrid-ai-agent"
            exit 1
        fi
        
        log_info "Using app from context: $APP_FROM_CONTEXT" >&2
        
        # Check deployment exists
        if ! validate_deployment_exists; then
            log_error "No deployment found. Run 'tfgrid-compose up' first"
            exit 1
        fi
        
        # Get VM IP from state
        vm_ip=$(grep "^vm_ip:" "$STATE_DIR/state.yaml" 2>/dev/null | awk '{print $2}')
        
        if [ -z "$vm_ip" ]; then
            log_error "No VM IP found in state"
            exit 1
        fi
        
        # Handle agent actions
        case "$ACTION" in
            list)
                ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                    root@$vm_ip "/opt/ai-agent/scripts/status-projects.sh"
                ;;
            run)
                PROJECT="$1"
                if [ -z "$PROJECT" ]; then
                    ssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                        root@$vm_ip "cd /opt/ai-agent && bash scripts/interactive-wrapper.sh run"
                else
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                        root@$vm_ip "/opt/ai-agent/scripts/run-project.sh $PROJECT"
                fi
                ;;
            create)
                ssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                    root@$vm_ip "cd /opt/ai-agent && /opt/ai-agent/scripts/create-project.sh"
                ;;
            stop)
                PROJECT="$1"
                if [ -z "$PROJECT" ]; then
                    ssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                        root@$vm_ip "cd /opt/ai-agent && bash scripts/interactive-wrapper.sh stop"
                else
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                        root@$vm_ip "/opt/ai-agent/scripts/stop-project.sh $PROJECT"
                fi
                ;;
            monitor)
                PROJECT="$1"
                if [ -z "$PROJECT" ]; then
                    ssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                        root@$vm_ip "cd /opt/ai-agent && bash scripts/interactive-wrapper.sh monitor"
                else
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                        root@$vm_ip "/opt/ai-agent/scripts/monitor-project.sh $PROJECT"
                fi
                ;;
            remove)
                PROJECT="$1"
                if [ -z "$PROJECT" ]; then
                    ssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                        root@$vm_ip "cd /opt/ai-agent && bash scripts/interactive-wrapper.sh remove"
                else
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR \
                        root@$vm_ip "/opt/ai-agent/scripts/remove-project.sh $PROJECT"
                fi
                ;;
            *)
                log_error "Unknown agent action: $ACTION"
                log_info "Usage: tfgrid-compose agent {list|run|create|stop|monitor|remove} [project]"
                exit 1
                ;;
        esac
        ;;
        
    update)
        # Update command - install latest version from GitHub
        log_info "TFGrid Compose v$VERSION - Update"
        echo ""

        # Check if curl is available
        if ! command -v curl >/dev/null 2>&1; then
            log_error "curl is required for update. Please install curl first."
            exit 1
        fi

        # Check if git is available
        if ! command -v git >/dev/null 2>&1; then
            log_error "git is required for update. Please install git first."
            exit 1
        fi

        echo "🔄 Checking for updates..."
        echo ""

        # Create temp directory
        TEMP_DIR=$(mktemp -d)
        trap "rm -rf '$TEMP_DIR'" EXIT

        # Clone latest version
        if ! git clone --depth 1 https://github.com/tfgrid-studio/tfgrid-compose.git "$TEMP_DIR/tfgrid-compose" >/dev/null 2>&1; then
            log_error "Failed to download latest version from GitHub"
            exit 1
        fi

        echo "📦 Installing latest version..."

        # Install the latest version
        cd "$TEMP_DIR/tfgrid-compose"
        if ! make install >/dev/null 2>&1; then
            log_error "Failed to install latest version"
            exit 1
        fi

        echo ""
        log_success "✅ Successfully updated to latest version!"
        echo ""
        echo "🧪 Test with: tfgrid-compose --version"
        exit 0
        ;;

    login)
        # Login command
        cmd_login "$@"
        ;;

    logout)
        # Logout command
        cmd_logout
        ;;

    config)
        # Config command
        cmd_config "$@"
        ;;

    docs)
        # Documentation command
        DOCS_URL="https://docs.tfgrid.studio"
        
        echo ""
        echo "📚 TFGrid Compose Documentation"
        echo ""
        echo "→ $DOCS_URL"
        echo ""
        
        sleep 0.5
        
        # Try to open in browser
        if command -v xdg-open &> /dev/null; then
            echo "Opening in browser..."
            sleep 0.5
            xdg-open "$DOCS_URL" >/dev/null 2>&1 &
            disown
            echo ""
            echo "✓ Done"
        elif command -v open &> /dev/null; then
            echo "Opening in browser..."
            sleep 0.5
            open "$DOCS_URL" >/dev/null 2>&1 &
            echo "✓ Done"
        else
            echo "ℹ  Copy the URL above to open in your browser"
        fi
        echo ""
        ;;

    version|--version|-v)
        # Version command
        echo "TFGrid Compose v$VERSION"
        ;;

    help|--help|-h|"")
        # Help command
        show_help
        ;;

    *)
        log_error "Unknown command: $COMMAND"
        echo ""
        show_help
        exit 1
        ;;
esac
